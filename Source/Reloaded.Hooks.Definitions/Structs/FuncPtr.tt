<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<# 
    string[] templates = 
    { 
        "TReturn", 
        "T1, TReturn", 
        "T1, T2, TReturn", 
        "T1, T2, T3, TReturn",
        "T1, T2, T3, T4, TReturn",
        "T1, T2, T3, T4, T5, TReturn",
        "T1, T2, T3, T4, T5, T6, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, TReturn",  
        "T1, T2, T3, T4, T5, T6, T7, T8, TReturn"
    };

    string[] conventions = 
    { 
        "Cdecl", 
        "Stdcall", 
        "Thiscall", 
        "Fastcall"
    };
#>

using System;

namespace Reloaded.Hooks.Definitions.Structs
{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
<#
			foreach (var template in templates)
			{

                foreach (var convention in conventions)
			    { 
#>        
    /// <summary>
    /// Wraps a CDECL compatible function pointer.
    /// </summary>
    public unsafe struct <#= convention #>FuncPtr<<#= template #>>
    {
        /// <summary>
        /// Calls the underlying function.
        /// </summary>
        public delegate*unmanaged[<#= convention #>]<<#= template #>> Invoke;

        public <#= convention #>FuncPtr(delegate*unmanaged[<#= convention #>]<<#= template #>> ptr) { Invoke = ptr; }
        public <#= convention #>FuncPtr(void* ptr) { Invoke = (delegate*unmanaged[<#= convention #>]<<#= template #>>) ptr; }

        public static implicit operator void*(<#= convention #>FuncPtr<<#= template #>> func) => func.Invoke;
        public static implicit operator <#= convention #>FuncPtr<<#= template #>>(void* ptr) => new <#= convention #>FuncPtr<<#= template #>>(ptr);
        public static implicit operator <#= convention #>FuncPtr<<#= template #>>(IntPtr ptr) => new <#= convention #>FuncPtr<<#= template #>>((void*)ptr);
        public static implicit operator <#= convention #>FuncPtr<<#= template #>>(delegate*unmanaged[<#= convention #>]<<#= template #>> ptr) => new <#= convention #>FuncPtr<<#= template #>>(ptr);
    }
<#
                }
            } 
#>
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
}